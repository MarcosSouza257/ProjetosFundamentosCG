1. O que é a GLSL? Quais os dois tipos de shaders são obrigatórios no pipeline programável da versão atual que trabalhamos em aula e o que eles processam?

RESPOSTA: A GLSL (OpenGL Shading Language) é uma linguagem para programar shaders na API gráfica OpenGL. Os dois tipos de shaders que são obrigatórios no pipeline programável são: Vertex Shader e o Fragment Shader.
   
2. O que são primitivas gráficas? Como fazemos o armazenamento dos vértices na OpenGL?

RESPOSTA: Primitivas gráficas são os elementos mais básicos que podem ser criados no OpenGL. São exemplos de primitivas: pontos, linhas, triangulo. Podemos armazernar os vértices utilizando um array/vetor no OpenGL.

3. Explique o que é VBO, VAO e EBO, e como se relacionam (se achar mais fácil, pode fazer um gráfico representando a relação entre eles).

RESPOSTA:  Vertex Buffer Object (VBO): Armazena dados como posição, vetores normais, cores, coordenadas de textura, etc., diretamente na memória da GPU. Ele permite uma renderização mais rápida ao manter os dados necessários para desenhar objetos sem a necessidade de transferência repetida entre a CPU e a GPU.

Vertex Array Object (VAO): Organizar e descrever como os dados contidos nos VBOs devem ser interpretados. Ele define a estrutura dos vértices, como a ordem dos atributos e a localização na memória dos buffers (VBOs), simplificando a configuração dos atributos de vértice durante a renderização.

Element Buffer Object (EBO): Semelhante ao VBO, armazena dados de índice que descrevem a ordem dos vértices a serem desenhados para formar primitivas geométricas (como triângulos). Isso reduz a redundância na especificação de vértices, permitindo a reutilização eficiente de vértices comuns entre diferentes primitivas.
  
5. Analise o código fonte do projeto Hello Triangle. Localize e relacione os conceitos de shaders, VBOs e VAO apresentados até então. Não precisa entregar nada neste exercício.

RESPOSTA: Certo, analisado.
